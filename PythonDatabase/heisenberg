#!/usr/bin/python

import sys
import pyperclip
import dataset
import random
import webbrowser

# service with a password
class Database():

    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()'

    # (creating and) Connecting to the database
    def __init__(self, databaseName):
        self.db = dataset.connect('sqlite:///./' + databaseName)

        # Load the table
        # create the first column: service name
        # 50 is the maximum size for the service name
        self.db.create_table("passwords", primary_id="service", primary_type=self.db.types.string(50))
        self.table = self.db.load_table("passwords")
            
        # create the second column: password
        # 50 is the maximum size for the password
        self.table.create_column('password', self.db.types.string(50))

    # set a new password for a service
    def set(self, service, password):
        # typecast arguments to strings
        service = str(service)
        password = str(password)
        
        # check that an entry with the same key does not exist
        exist = self.table.find_one(service=service)
        if exist != None:
            self.table.update(dict(service=service, password=password), ['service'])
        else:
            self.table.insert(dict(service=service, password=password))

    # generate a new password for a service
    def generate(self, service):
        password = "";
        for i in range(0, 20):
            password = password + random.choice(self.alphabet)
        self.set(service, password)

    # set master passsword
    def setMaster(self, run):
        if run == 1:
            webbrowser.open('../PictureCode/index.html')
        else:
            with open('temporary') as f:
                content = f.readlines()
                content = [x.strip() for x in content]
                self.set('hEiSeNbErG', content[0])


    # get the password for a service
    # if it exists
    def get(self, service):
        password = self.table.find_one(service=service)

        if password == None:
            print("A password for this service has not been set")
        else:
            return password

# The interface for the command
def interface(dbObject):
    if len(sys.argv) < 2:
        printHelp()
        return

    command = str(sys.argv[1])
    
    if command == "set":
        if len(sys.argv) < 4:
            printHelp()
            return
        service = str(sys.argv[2])
        password = str(sys.argv[3])
        dbObject.set(service, password)
    elif command == "setMaster":
        if len(sys.argv) < 3:
            printHelp()
            return
        run = str(sys.argv[2])
        dbObject.setMaster(run)
    elif command == "generate":
        if len(sys.argv) < 3:
            printHelp()
            return
        service = str(sys.argv[2])
        dbObject.generate(service)
    elif command == "get":
        if len(sys.argv) < 3:
            printHelp()
            return
        service = str(sys.argv[2])
        entry = dbObject.get(service)
        if entry == None:
            return
        password = entry["password"]
        pyperclip.copy(password)
    else:
        printHelp()
    
# For the 'help' command
def printHelp():
    print("heisenberg set service password")
    print("--- to set your password for a serivce")
    print

    print("heisenberg setMaster run")
    print("--- to set the master password")
    print

    print("heisenberg generate service")
    print("--- to generate a secure password for a serivce")
    print

    print("heisenberg get service")
    print("--- to get the password for a serivce")
    print

    print("heisenberg help")
    print("--- to obtain the list of available commands")
    print

# Check that the master password coincides
def check(master):
    webbrowser.open('../PictureCode/index.html')
    with open('check') as f:
        content = f.readlines()
        content = [x.strip() for x in content]
        return content[0] == master

# Where everything happens
def main():
    dbObject = Database('passwords.db')

    master = dbObject.get('hEiSeNbErG')
    if master == None:
        print("You need to set the master password first!")
        dbObject.setMaster(1)
        dbObject.setMaster(2)
    else:
        print("Please enter your master password: ")
        if not (check(master['password'])):
            print("Wrong password...")
            return

    interface(dbObject)

main()
